name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.20.0'
      
      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  python-package:
    needs: goreleaser
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [linux, windows, darwin]
        arch: [x86_64, arm64]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set version
        run: |
          echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      
      - name: Download release binary
        shell: bash
        run: |
          ASSET_NAME="gptcomet_${{ matrix.os }}_${{ matrix.arch }}.tar.gz"
          ASSET_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.PACKAGE_VERSION }} | \
            jq -r --arg name "$ASSET_NAME" '.assets[] | select(.name == $name) | .browser_download_url')
          
          if [ -z "$ASSET_URL" ]; then
            echo "Error: Could not find asset $ASSET_NAME"
            exit 1
          fi
          
          curl -L -o binary.tar.gz $ASSET_URL
          mkdir -p py/gptcomet/bin
          tar xzf binary.tar.gz
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            mv gptcomet.exe py/gptcomet/bin/
          else
            mv gptcomet py/gptcomet/bin/
          fi
          
          # Set platform tag for wheel
          platform=""
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              platform="linux_x86_64"
            else
              platform="linux_aarch64"
            fi
          elif [[ "${{ matrix.os }}" == "windows" ]]; then
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              platform="win_amd64"
            else
              platform="win_arm64"
            fi
          elif [[ "${{ matrix.os }}" == "darwin" ]]; then
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              platform="macos_x86_64"
            else
              platform="macos_arm64"
            fi
          fi
          echo "PLATFORM=${platform}" >> $GITHUB_ENV
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdm
      
      - name: Publish to PyPI
        if: success()
        env:
          PDM_PUBLISH_USERNAME: __token__
          PDM_PUBLISH_PASSWORD: ${{ secrets.PDM_PUBLISH_PASSWORD }}
        run: |
          cd py/gptcomet
          pdm version ${{ env.VERSION }}
          # 为特定平台构建并发布
          pdm build --platform ${{ env.PLATFORM }}
          pdm publish --repository pypi-test --no-verify
