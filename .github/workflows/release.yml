name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.20.0'
      
      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  python-package:
    needs: goreleaser
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: linux
            arch: x86_64
          - os: linux
            arch: arm64
          - os: darwin
            arch: x86_64
          - os: darwin
            arch: arm64
          - os: windows
            arch: x86_64

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set version
        run: |
          echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Set PACKAGE_VERSION=${GITHUB_REF#refs/tags/} and VERSION=${GITHUB_REF#refs/tags/v}"
          ls -alh
      
      - name: Download release binary
        shell: bash
        run: |
          echo "Downloading release binary for OS=${{ matrix.os }} ARCH=${{ matrix.arch }}"
          # Convert arch name for asset download
          if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
            BINARY_ARCH="amd64"
          else
            BINARY_ARCH="arm64"
          fi

          if [[ "${{ matrix.os }}" == "windows" ]]; then
            ASSET_NAME="gptcomet_${{ env.VERSION }}_${{ matrix.os }}_${BINARY_ARCH}.zip"
            EXTRACT_CMD="unzip -o"
          else
            ASSET_NAME="gptcomet_${{ env.VERSION }}_${{ matrix.os }}_${BINARY_ARCH}.tar.gz"
            EXTRACT_CMD="tar xzf"
          fi
          
          echo "ASSET_NAME=${ASSET_NAME}"
          ASSET_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.PACKAGE_VERSION }} | \
            jq -r --arg name "$ASSET_NAME" '.assets[] | select(.name == $name) | .browser_download_url')
          
          if [ -z "$ASSET_URL" ]; then
            echo "Error: Could not find asset $ASSET_NAME"
            exit 1
          fi
          
          echo "Downloading from $ASSET_URL"
          curl -L -o binary.archive $ASSET_URL
          mkdir -p py/gptcomet/bin
          echo "Extracting binary.archive using $EXTRACT_CMD"
          $EXTRACT_CMD binary.archive
          ls -alh py/gptcomet/bin
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            mv gptcomet.exe "py/gptcomet/bin/gptcomet_${{ matrix.arch }}.exe"
          elif [[ "${{ matrix.os }}" == "darwin" ]]; then
            mv gptcomet "py/gptcomet/bin/gptcomet_${{ matrix.arch }}_mac"
          elif [[ "${{ matrix.os }}" == "linux" ]]; then
            mv gptcomet "py/gptcomet/bin/gptcomet_${{ matrix.arch }}_linux"
          fi
          ls -alh py/gptcomet/bin
          
          # Set platform tag for wheel
          platform=""
          if [[ "${{ matrix.os }}" == "linux" ]]; then
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              platform="linux_x86_64"
            else
              platform="linux_aarch64"
            fi
          elif [[ "${{ matrix.os }}" == "windows" ]]; then
            platform="win_amd64"
          elif [[ "${{ matrix.os }}" == "darwin" ]]; then
            if [[ "${{ matrix.arch }}" == "x86_64" ]]; then
              platform="macos_x86_64"
            else
              platform="macos_arm64"
            fi
          fi
          echo "PLATFORM=${platform}" >> $GITHUB_ENV
          echo "Set PLATFORM=${platform}"
          ls -alh
      
      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          python -m pip install --upgrade pip
          pip install pdm
          pdm --version
      
      - name: Build package
        run: |
          echo "Building package with pdm"
          pdm build --no-sdist
          ls -alh dist
      
      - name: Publish to PyPI
        env:
          PDM_PUBLISH_USERNAME: __token__
          PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing to PyPI"
          echo "PDM_PUBLISH_USERNAME=${{ secrets.PYPI_API_TOKEN }}"
          echo ">>>>>"
          echo $PYPI_API_TOKEN
          ls -alh dist
          pdm publish --repository testpypi --no-build
