name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.20.0'
      
      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  python-package:
    needs: goreleaser
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: windows
            arch: x86_64
          - os: macos-13
            platform: macos
            arch: amd64
          - os: macos-14
            platform: macos
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            qemu: true
        os: [windows, macos-13, macos-14, ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set version
        run: |
          echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Set PACKAGE_VERSION=${GITHUB_REF#refs/tags/} and VERSION=${GITHUB_REF#refs/tags/v}"
          ls -alh
      
      - name: Download release binary (Unix)
        if: matrix.os != 'windows'
        shell: bash
        run: |
          echo "Downloading release binary for OS=${{ matrix.os }} ARCH=${{ matrix.arch }}"
          
          # Set asset OS name
          case "${{ matrix.os }}" in
            ubuntu-latest)
              ASSET_OS="linux"
              ;;
            macos-*)
              ASSET_OS="darwin"
              ;;
          esac
          
          ASSET_NAME="gptcomet_${{ env.VERSION }}_${ASSET_OS}_${{ matrix.arch }}.tar.gz"
          
          echo "ASSET_NAME=${ASSET_NAME}"
          ASSET_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.PACKAGE_VERSION }} | \
            jq -r --arg name "$ASSET_NAME" '.assets[] | select(.name == $name) | .browser_download_url')
          
          if [ -z "$ASSET_URL" ]; then
            echo "Error: Could not find asset $ASSET_NAME"
            exit 1
          fi
          
          echo "Downloading from $ASSET_URL"
          curl -L -o binary.archive $ASSET_URL
          mkdir -p py/gptcomet/bin
          tar xzf binary.archive
          
          if [[ "${{ matrix.os }}" == *"macos"* ]]; then
            mv gptcomet "py/gptcomet/bin/gptcomet_${{ matrix.arch }}_mac"
          else
            mv gptcomet "py/gptcomet/bin/gptcomet_${{ matrix.arch }}_linux"
          fi
          ls -alh py/gptcomet/bin

      - name: Download release binary (Windows)
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          echo "Downloading release binary for Windows ARCH=${{ matrix.arch }}"
          
          $assetName = "gptcomet_${{ env.VERSION }}_windows_${{ matrix.arch }}.zip"
          echo "ASSET_NAME=$assetName"
          
          $releaseInfo = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.PACKAGE_VERSION }}"
          $assetUrl = ($releaseInfo.assets | Where-Object { $_.name -eq $assetName }).browser_download_url
          
          if (-not $assetUrl) {
            echo "Error: Could not find asset $assetName"
            exit 1
          }
          
          echo "Downloading from $assetUrl"
          curl -L -o binary.archive $assetUrl
          mkdir -p py/gptcomet/bin
          Expand-Archive -Path binary.archive -DestinationPath .
          mv gptcomet.exe "py/gptcomet/bin/gptcomet_${{ matrix.arch }}.exe"
          ls -alh py/gptcomet/bin
          
          # Set platform tag for wheel
          if (${{ matrix.os }} -eq "windows") {
            $PLATFORM = "win_amd64"
          }
          
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "Set PLATFORM=$PLATFORM"
          ls -alh
      
      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          python -m pip install --upgrade pip
          pip install pdm
          pdm --version
      
      - name: Build package
        run: |
          echo "Building package on ${{ matrix.os }} with arch ${{ matrix.arch }}"
          pdm build --no-sdist
          ls -lh dist/

      - name: Publish to PyPI
        if: success()
        env:
          PDM_PUBLISH_USERNAME: __token__
          PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing packages built on ${{ matrix.os }} with arch ${{ matrix.arch }}"
          pdm publish -r testpypi --no-build
