name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.20.0'
      
      - uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  python-package:
    needs: goreleaser
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - os: 	windows-latest
            arch: x86_64
          - os: macos-13
            platform: macos
            arch: amd64
          - os: macos-14
            platform: macos
            arch: arm64
          - os: ubuntu-20.04
            platform: linux
            arch: amd64
          - os: ubuntu-20.04
            platform: linux
            arch: arm64
            qemu: true
        os: [windows-latest, macos-13, macos-14, ubuntu-20.04]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set version (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Set PACKAGE_VERSION=${GITHUB_REF#refs/tags/} and VERSION=${GITHUB_REF#refs/tags/v}"
          ls -alh

      - name: Set version (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $PACKAGE_VERSION = $env:GITHUB_REF -replace 'refs/tags/',''
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/v',''
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $env:GITHUB_ENV
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "Set PACKAGE_VERSION=$PACKAGE_VERSION and VERSION=$VERSION"
          Get-ChildItem
      
      - name: Download release binary (Windows)
        if: runner.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Output "Downloading release binary for Windows ARCH=x86_64"
          
          $assetName = "gptcomet_$env:VERSION_windows_x86_64.zip"
          $assetUrl = "https://github.com/$env:GITHUB_REPOSITORY/releases/download/$env:PACKAGE_VERSION/$assetName"
          
          Write-Output "Downloading from $assetUrl"
          curl -L -o binary.archive $assetUrl
          Expand-Archive -Path binary.archive -DestinationPath .
          mv gptcomet.exe "py/gptcomet/bin/gptcomet_x86_64.exe"
          ls py/gptcomet/bin
          
          # Set platform tag for wheel
          $PLATFORM = "win_amd64"
          Write-Output "PLATFORM=$PLATFORM" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "Set PLATFORM=$PLATFORM"
          ls

      - name: Download release binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Downloading release binary for OS=${{ matrix.os }} ARCH=${{ matrix.arch }}"
          
          # Set asset OS name
          case "${{ matrix.os }}" in
            ubuntu-20.04)
              ASSET_OS="linux"
              ;;
            macos-*)
              ASSET_OS="darwin"
              ;;
          esac

          ASSET_NAME="gptcomet_${{ env.VERSION }}_${ASSET_OS}_${{ matrix.arch }}.tar.gz"
          ASSET_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.PACKAGE_VERSION }}/${ASSET_NAME}"
          
          echo "Downloading from $ASSET_URL"
          curl -L -o binary.archive $ASSET_URL
          tar xzf binary.archive
          
          if [[ "${{ matrix.os }}" == *"macos"* ]]; then
            mv gptcomet "py/gptcomet/bin/gptcomet_${{ matrix.arch }}_mac"
          else
            mv gptcomet "py/gptcomet/bin/gptcomet_${{ matrix.arch }}_linux"
          fi
          ls -alh py/gptcomet/bin
          
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "Set PLATFORM=$PLATFORM"
          ls
      
      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          python -m pip install --upgrade pip
          pip install pdm
          pdm --version
      
      - name: Build package
        run: |
          echo "Building package on ${{ matrix.os }} with arch ${{ matrix.arch }}"
          pdm build --no-sdist
          ls dist/

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.whl
          retention-days: 1

  publish:
    needs: python-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      
      - name: Install pdm
        run: |
          python -m pip install --upgrade pip
          pip install pdm
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      
      - name: Prepare dist directory
        run: |
          mkdir -p final_dist
          find dist -name "*.whl" -exec cp {} final_dist/ \;
          ls -la final_dist/

      - name: Publish to PyPI
        env:
          PDM_PUBLISH_USERNAME: __token__
          PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          PDM_PUBLISH_TIMEOUT: 300
        run: |
          echo "Publishing to PyPI"
          pdm publish --no-build -p final_dist/* -r testpypi
